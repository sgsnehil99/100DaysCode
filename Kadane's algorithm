 ### Maximum Contiguous sum of the array.##

Time Complexity : O(n);
Space Complexity : O(1);

Keep the Default value of max_sum = arr[0] //so that it stores a minimum of 1 value.

Step process:
 1. Calculate the sum of elements until. 
    sum = sum + a[i];
 2. Calculate the maximum sum until now.
    max_sum = max(max_sum, sum)
 3. if sum < 0  make sum  = 0;


Code : C++ 
  long long maxSubarraySum(int arr[], int n){
        
        // Your code here
        long long max_sum = arr[0],sum = 0;
        
        for(int i = 0 ;i < n ;i++)
        {
            //step 1 : sum so far of element 
            sum = sum + arr[i];
            
            //step 2:maximum sum
            max_sum  = max(max_sum , sum);
            
            //condition if sum goes to negative 
            if(sum < 0)
                sum = 0 ;
        }
        return max_sum;
    }

Code: python 

def maxSubArraySum(self,arr,n):
        ##Your code here
        max_sum = arr[0]
        curr_sum = 0
        
        for i in range(0,n):
            
            #calculating current sum
            curr_sum = curr_sum + arr[i]
            
            #compare
            max_sum = max(max_sum, curr_sum)
            
            #if negative then make current sum = 0
            if(curr_sum < 0):
                curr_sum = 0
        
        return max_sum;
